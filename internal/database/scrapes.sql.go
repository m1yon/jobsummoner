// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: scrapes.sql

package database

import (
	"context"
	"database/sql"
)

const createScrape = `-- name: CreateScrape :exec
INSERT INTO scrapes (created_at, updated_at, last_scraped, name, location, work_type, user_id)
VALUES (CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, ?, ?, ?, ?)
`

type CreateScrapeParams struct {
	Name     string
	Location string
	WorkType int64
	UserID   int64
}

func (q *Queries) CreateScrape(ctx context.Context, arg CreateScrapeParams) error {
	_, err := q.db.ExecContext(ctx, createScrape,
		arg.Name,
		arg.Location,
		arg.WorkType,
		arg.UserID,
	)
	return err
}

const getLastScrapedDate = `-- name: GetLastScrapedDate :one
SELECT last_scraped
FROM scrapes
WHERE id = ?
ORDER BY last_scraped DESC
LIMIT 1
`

func (q *Queries) GetLastScrapedDate(ctx context.Context, id int64) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, getLastScrapedDate, id)
	var last_scraped sql.NullTime
	err := row.Scan(&last_scraped)
	return last_scraped, err
}

const updateLastScraped = `-- name: UpdateLastScraped :exec
UPDATE scrapes
SET last_scraped = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateLastScraped(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateLastScraped, id)
	return err
}
