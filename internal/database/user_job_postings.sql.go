// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_job_postings.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUserJobPosting = `-- name: CreateUserJobPosting :exec
INSERT INTO user_job_postings (created_at, user_id, job_posting_id)
VALUES (CURRENT_TIMESTAMP, ?, ?)
`

type CreateUserJobPostingParams struct {
	UserID       int64
	JobPostingID string
}

func (q *Queries) CreateUserJobPosting(ctx context.Context, arg CreateUserJobPostingParams) error {
	_, err := q.db.ExecContext(ctx, createUserJobPosting, arg.UserID, arg.JobPostingID)
	return err
}

const getUserJobPostingsByStatus = `-- name: GetUserJobPostingsByStatus :many
SELECT job_postings.position, job_postings.url as job_posting_url, companies.name as company_name, last_posted, companies.avatar as company_avatar, companies.id as company_id, job_postings.id as job_posting_id, user_job_postings.status
FROM user_job_postings
JOIN companies on job_postings.company_id = companies.id
JOIN job_postings on user_job_postings.job_posting_id = job_postings.id
WHERE user_job_postings.user_id = ? AND user_job_postings.status = ?
ORDER BY job_postings.last_posted DESC
`

type GetUserJobPostingsByStatusParams struct {
	UserID int64
	Status int64
}

type GetUserJobPostingsByStatusRow struct {
	Position      string
	JobPostingUrl string
	CompanyName   string
	LastPosted    time.Time
	CompanyAvatar sql.NullString
	CompanyID     string
	JobPostingID  string
	Status        int64
}

func (q *Queries) GetUserJobPostingsByStatus(ctx context.Context, arg GetUserJobPostingsByStatusParams) ([]GetUserJobPostingsByStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserJobPostingsByStatus, arg.UserID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserJobPostingsByStatusRow
	for rows.Next() {
		var i GetUserJobPostingsByStatusRow
		if err := rows.Scan(
			&i.Position,
			&i.JobPostingUrl,
			&i.CompanyName,
			&i.LastPosted,
			&i.CompanyAvatar,
			&i.CompanyID,
			&i.JobPostingID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserJobPostingStatus = `-- name: UpdateUserJobPostingStatus :exec
UPDATE user_job_postings
SET status = ?
WHERE user_id = ? AND job_posting_id = ?
`

type UpdateUserJobPostingStatusParams struct {
	Status       int64
	UserID       int64
	JobPostingID string
}

func (q *Queries) UpdateUserJobPostingStatus(ctx context.Context, arg UpdateUserJobPostingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserJobPostingStatus, arg.Status, arg.UserID, arg.JobPostingID)
	return err
}
