// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_postings.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createJobPosting = `-- name: CreateJobPosting :exec
INSERT INTO job_postings (id, created_at, updated_at, last_posted, position, url, company_id, location_type, location)
VALUES (?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?, ?)
`

type CreateJobPostingParams struct {
	ID           string
	LastPosted   time.Time
	Position     string
	Url          string
	CompanyID    string
	LocationType int64
	Location     sql.NullString
}

func (q *Queries) CreateJobPosting(ctx context.Context, arg CreateJobPostingParams) error {
	_, err := q.db.ExecContext(ctx, createJobPosting,
		arg.ID,
		arg.LastPosted,
		arg.Position,
		arg.Url,
		arg.CompanyID,
		arg.LocationType,
		arg.Location,
	)
	return err
}

const getJobPostings = `-- name: GetJobPostings :many
SELECT job_postings.position, job_postings.url as job_posting_url, companies.name as company_name, last_posted, companies.avatar as company_avatar from job_postings
JOIN companies on job_postings.company_id = companies.id
ORDER BY job_postings.last_posted DESC
`

type GetJobPostingsRow struct {
	Position      string
	JobPostingUrl string
	CompanyName   string
	LastPosted    time.Time
	CompanyAvatar sql.NullString
}

func (q *Queries) GetJobPostings(ctx context.Context) ([]GetJobPostingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getJobPostings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJobPostingsRow
	for rows.Next() {
		var i GetJobPostingsRow
		if err := rows.Scan(
			&i.Position,
			&i.JobPostingUrl,
			&i.CompanyName,
			&i.LastPosted,
			&i.CompanyAvatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobPostingLastPosted = `-- name: UpdateJobPostingLastPosted :exec
UPDATE job_postings
SET last_posted = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateJobPostingLastPostedParams struct {
	LastPosted time.Time
	ID         string
}

func (q *Queries) UpdateJobPostingLastPosted(ctx context.Context, arg UpdateJobPostingLastPostedParams) error {
	_, err := q.db.ExecContext(ctx, updateJobPostingLastPosted, arg.LastPosted, arg.ID)
	return err
}
