// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job.sql

package sqlitedb

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :exec
INSERT INTO jobs (id, created_at, last_posted, position, url, company_id, location, source_id)
VALUES (?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?)
`

type CreateJobParams struct {
	ID        string
	Position  string
	Url       string
	CompanyID string
	Location  sql.NullString
	SourceID  string
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) error {
	_, err := q.db.ExecContext(ctx, createJob,
		arg.ID,
		arg.Position,
		arg.Url,
		arg.CompanyID,
		arg.Location,
		arg.SourceID,
	)
	return err
}

const getJob = `-- name: GetJob :one
SELECT jobs.position, jobs.location, jobs.url AS job_url, companies.url AS company_url, companies.name AS company_name, companies.id AS company_id, jobs.source_id FROM jobs
JOIN companies ON jobs.company_id = companies.id
WHERE jobs.id = ?
`

type GetJobRow struct {
	Position    string
	Location    sql.NullString
	JobUrl      string
	CompanyUrl  string
	CompanyName string
	CompanyID   string
	SourceID    string
}

func (q *Queries) GetJob(ctx context.Context, id string) (GetJobRow, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i GetJobRow
	err := row.Scan(
		&i.Position,
		&i.Location,
		&i.JobUrl,
		&i.CompanyUrl,
		&i.CompanyName,
		&i.CompanyID,
		&i.SourceID,
	)
	return i, err
}
