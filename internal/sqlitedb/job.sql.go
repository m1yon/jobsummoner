// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job.sql

package sqlitedb

import (
	"context"
	"database/sql"
)

const addJob = `-- name: AddJob :exec
INSERT INTO jobs (id, created_at, last_posted, position, url, company_id, location, source_id)
VALUES (?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, ?, ?, ?, ?,  ?)
`

type AddJobParams struct {
	ID        string
	Position  string
	Url       string
	CompanyID string
	Location  sql.NullString
	SourceID  int64
}

func (q *Queries) AddJob(ctx context.Context, arg AddJobParams) error {
	_, err := q.db.ExecContext(ctx, addJob,
		arg.ID,
		arg.Position,
		arg.Url,
		arg.CompanyID,
		arg.Location,
		arg.SourceID,
	)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, created_at, updated_at, last_posted, position, url, company_id, location, source_id FROM jobs
WHERE id = ?
`

func (q *Queries) GetJob(ctx context.Context, id string) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastPosted,
		&i.Position,
		&i.Url,
		&i.CompanyID,
		&i.Location,
		&i.SourceID,
	)
	return i, err
}
